<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CNsixgod</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-12T14:19:17.411Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sixgod</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql优化</title>
    <link href="http://yoursite.com/2018/12/12/mysql-youhua/"/>
    <id>http://yoursite.com/2018/12/12/mysql-youhua/</id>
    <published>2018-12-12T14:19:29.262Z</published>
    <updated>2018-12-12T14:19:17.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql优化"><a href="#mysql优化" class="headerlink" title="mysql优化"></a>mysql优化</h1><h2 id="msyql优化方向"><a href="#msyql优化方向" class="headerlink" title="msyql优化方向"></a>msyql优化方向</h2><ul><li>存储层 存储引擎 列类型 范式</li><li>设计层 索引 缓存 分表</li><li>sql层 效率高的sql语句</li><li>架构层 分布式数据库架构 主从同步</li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ol><li><strong>myisam</strong></li></ol><ul><li>物理文件<ul><li>.frm    结构文件</li><li>.MYD    数据文件</li><li>.MYI    索引文件</li></ul></li><li>存储顺序<ul><li>存储顺序为插入顺序  没有排序</li></ul></li><li>复制备份，压缩机制<ul><li>移动三个物理文件即可备份恢复</li><li>压缩： 节省空间，查询快速(表压缩之后无法进行写入操作,压缩表机制，适合读比较多的场景使用)<ul><li>Mysql\bin  myisamchk.exe – 重建索引及解压缩</li><li>myisampack.exe –压缩<ul><li>cmd &gt; D:\phpstudy\Mysql\bin\myisampack.exe D:\phpstudy\Mysql\data\student</li></ul></li><li>myisamchk.exe –重建索引<ul><li>cmd &gt; D:\phpstudy\Mysql\bin\myisamchk.exe -rq D:\phpstudy\Mysql\data\student</li></ul></li><li>myisamchk.exe –解压缩(压缩操作需要进行表的索引重建，但是解压不需要了，会自动重建。)<ul><li>cmd &gt; D:\phpstudy\Mysql\bin\myisamchk.exe –unpack D:\phpstudy\Mysql\data\student</li></ul></li></ul></li></ul></li><li>并发性： 表级锁（并发写入）<ul><li>并发性稍弱，只有表锁 <a href="https://www.cnblogs.com/qq78292959/archive/2013/01/30/2883109.html" target="_blank" rel="noopener">相关链接</a></li></ul></li></ul><ol start="2"><li><strong>innodb</strong></li></ol><ul><li>物理文件<ul><li>.frm    结构文件</li><li>数据库的所有innodb数据和索引文件都放在data/ibdata1文件中</li></ul></li><li>存储顺序<ul><li>存储顺序为数据主键顺序</li></ul></li><li><p>复制备份</p><ul><li>需要导出sql文件，再导入进行备份和恢复操作</li><li>所以需要进行innodb表数据结构的分开存储操作<ul><li>mysql &gt; show variables like ‘innodb_file_per_table’; //查看innodb存储状态 value off 关闭</li><li>mysql &gt; set global innodb_file_per_table=1;  //临时修改值为开启 value on 开启  建表后数据索引文件就分离 ibdata1了 重启后建表数据还是在一起，但是分开后的就不会再连一起了 xxx.ibd文件–数据和索引文件</li></ul></li></ul></li><li><p>并发性： 擅长并发</p><ul><li>更适合并发写入，并发写中，为了防止数据不一致 使用锁机制</li><li>有更小的锁表粒度,行级别</li></ul></li></ul><ol start="3"><li><strong>如何选择myisam innodb</strong><ul><li>根据引擎的特点进行选择</li><li>功能性上，快速备份恢复myisam；事务和外键，选择innodb</li><li>一般使用myisam，cms（内容管理系统）</li><li>innodb适合使用在抢购功能，订单功能，并发写入较多</li></ul></li></ol><h3 id="字段选取"><a href="#字段选取" class="headerlink" title="字段选取"></a>字段选取</h3><ul><li>age 用tinyint  乌龟年龄 smallint 表数据不超过1600w+  使用mediumint</li><li>内容长度<ul><li>char(255) 固定字符 不足null补齐 varchar(65535) 如果是UTF则最大65535/3 - 1个字符，因为要预留空间存放该字段的字符数目)</li><li>加密密码 手机号 char</li><li>邮箱 varchar</li><li>char查询的效率比varchar高</li></ul></li><li>整型存储<ul><li>尽量使用整型存储其他数据的类型。节省空间提高查询速度<ul><li>时间戳<ul><li>使用int来存储时间。4字节<ul><li>mysql里的时间戳函数</li><li>unix_timestamp()  当前时间戳信息</li><li>from_unixtime()  读取一个时间戳信息</li><li>php用date()转换</li><li>int类型 时间的比较直接比大小就行了</li></ul></li><li>使用int存储IP 计算范围更加方便<ul><li>mysql:  inet_aton(ip) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  inet_ntoa(int)</li><li>php: ip2long(ip)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long2ip(ip)</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><ol><li><strong>第一范式</strong> 列类型具有原子性，每列(或者每个属性)都是不可再分的最小数据单元(也称为最小的原子单元)</li><li><strong>第二范式</strong>  数据具有唯一性 设置主键</li><li><strong>第三范式</strong> 数据字段和主键具有紧密联系/直接关系，不能够有冗（rong）余[重复]数据</li></ol><hr><p>1NF&lt;2NF&lt;3NF，范式是一层层满足的</p><h4 id="逆范式"><a href="#逆范式" class="headerlink" title="逆范式"></a>逆范式</h4><p>&nbsp;&nbsp;一般情况下，设计的表结构符合三范式，被认为是良好的数据机构设计。<br>但是，在很多实际业务场景下，为了能够提高数据表的查询速度，要建立使用冗（rong）余字段。也就不符合第三范式了。为了整 第三范式。<br>之前的查询学生的所有信息（包含系别信息），需要进行连表操作。连表操作，遍历最大数为笛卡尔积（相乘）。可以修改表机构为如下，建立冗余字段。</p><ul><li>建立冗余字段之后，查询变快。在修改和维护数据时，要同时维护冗余字段。保持数据的一致性</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql优化&quot;&gt;&lt;a href=&quot;#mysql优化&quot; class=&quot;headerlink&quot; title=&quot;mysql优化&quot;&gt;&lt;/a&gt;mysql优化&lt;/h1&gt;&lt;h2 id=&quot;msyql优化方向&quot;&gt;&lt;a href=&quot;#msyql优化方向&quot; class=&quot;header
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>MYSQL 索引</title>
    <link href="http://yoursite.com/2018/12/11/mysql/"/>
    <id>http://yoursite.com/2018/12/11/mysql/</id>
    <published>2018-12-11T14:04:52.465Z</published>
    <updated>2018-12-11T14:29:38.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL-索引"><a href="#MYSQL-索引" class="headerlink" title="MYSQL 索引"></a>MYSQL 索引</h1><ul><li><p>索引的好处：<br> 20多条数据源随机生成200万条数据，平均每条数据源都重复大概10万次，表结构比较简单，仅包含一个自增ID，一个char类型，一个text类型和一个int类型，单表2G大小，使用MyIASM引擎。开始测试未添加任何索引。执行下面的SQL语句：</p><p> mysql&gt; SELECT id,FROM_UNIXTIME(time) FROM article WHERE a.title=’测试标题’</p><p>  查询需要的时间非常恐怖的，如果加上联合查询和其他一些约束条件，数据库会疯狂的消耗内存，并且会影响前端程序的执行。这时给title字段添加一个BTREE索引：</p><p> mysql&gt; ALTER TABLE article ADD INDEX index_article_title ON title(200);<br> 再次执行上述查询语句，其对比非常明显</p><p> 测试是否使用了索引进行查询</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from table where xxx=1;</span><br></pre></td></tr></table></figure><p> <a href="https://www.cnblogs.com/david97/p/8072164.html" target="_blank" rel="noopener">explain 关键字</a></p></li></ul><hr><ol><li>普通索引<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create INDEX index_name ON table(column(length))</span><br><span class="line">//直接创建</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name ON (column(length))</span><br><span class="line">//修改表结构</span><br><span class="line">create table tablename(</span><br><span class="line">    id int not null,</span><br><span class="line">    name varchar(255) not null,</span><br><span class="line">    KEY(name) //index() 也行</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">//创建表的时候同时创建</span><br><span class="line"></span><br><span class="line">---删除索引</span><br><span class="line">drop INDEX index_name ON table(column(length))</span><br></pre></td></tr></table></figure></li></ol><p>2.唯一索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create UNIQUE INDEX index_name ON table(column(length))</span><br><span class="line">//直接创建</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE index_name ON (column(length))</span><br><span class="line">//修改表结构</span><br><span class="line">create table tablename(</span><br><span class="line">    id int not null,</span><br><span class="line">    name varchar(255) not null,</span><br><span class="line">    UNIQUE INDEX index_name(id)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">//创建表的时候同时创建</span><br></pre></td></tr></table></figure></p><p>3.主键索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primary key(id)</span><br></pre></td></tr></table></figure></p><p>4.组合索引</p><ul><li>解释最左前缀<br>  组合索引就是遵从了最左前缀，利用索引中最左边的列集来匹配行，这样的列集称为最左前缀，不明白没关系，举几个例子就明白了，例如，这里由id、name和age3个字段构成的索引，索引行中就按id/name/age的顺序存放，索引可以索引下面字段组合(id，name，age)、(id，name)或者(id)。如果要查询的字段不构成索引最左面的前缀，那么就不会是用索引，比如，age或者（name，age）组合就不会使用索引查询</li></ul><p>　　　　　　　　　　　　　　　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table tablename(</span><br><span class="line">    id int not null,</span><br><span class="line">    name varchar(255) not null,</span><br><span class="line">    age int not null,</span><br><span class="line">    index index_name(id,name,age)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>5.创建全文索引</p><ul><li><p>全文索引可以用于全文搜索，但只有MyISAM存储引擎支持FULLTEXT索引，并且只为CHAR、VARCHAR和TEXT列服务。索引总是对整个列进行，不支持前缀索引，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table tablename(</span><br><span class="line">    id int not null,</span><br><span class="line">    name varchar(255) not null,</span><br><span class="line">    age int not null,</span><br><span class="line">    info varchar(255) not null,</span><br><span class="line">    FULLTEXT INDEX index_name(info)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>注意：在使用全文搜索时，需要借助MATCH函数，并且其全文搜索的限制比较多，比如只能通过MyISAM引擎，比如只能在CHAR,VARCHAR,TEXT上设置全文索引。比如搜索的关键字默认至少要4个字符，比如搜索的关键字太短就会被忽略掉。等等，如果你们在实验的时候可能会实验不出来。感兴趣的同学可以看看这篇文章<a href="http://blog.sina.com.cn/s/blog_ae1611930101a063.html" target="_blank" rel="noopener">全文搜索的使用</a><br>-</p></li></ul><h2 id="索引的优化"><a href="#索引的优化" class="headerlink" title="索引的优化"></a>索引的优化</h2><ol><li>索引不会包含有NULL值得列<ul><li>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。<br>2.</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL-索引&quot;&gt;&lt;a href=&quot;#MYSQL-索引&quot; class=&quot;headerlink&quot; title=&quot;MYSQL 索引&quot;&gt;&lt;/a&gt;MYSQL 索引&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;索引的好处：&lt;br&gt; 20多条数据源随机生成200万条数据，平均每条数据源
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
</feed>
